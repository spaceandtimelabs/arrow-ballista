# CircleCI configuration file
version: 2.1

jobs:
  build:
    docker:
      - image: rust:1.62.1-buster
    steps:
      - checkout
      - run: |
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export DOCKER_TAG=$(git tag --points-at HEAD)
            if [ -z "$DOCKER_TAG" ]
            then
              export DOCKER_TAG=$(echo $(git describe --tags --abbrev=0) | awk -F. -v OFS=. '{$2 += 1 ; print}')
              git tag $DOCKER_TAG
              git push origin --tags
            fi
          else
            export SHORT_HASH=$(git rev-parse --short HEAD)
            export DOCKER_TAG="$CIRCLE_BRANCH-$SHORT_HASH"  
          fi
          echo $DOCKER_TAG > /root/project/docker-tag.txt
          apt-get update
          apt-get install -y cmake
          mkdir -p $HOME/d/protoc
          cd $HOME/d/protoc
          export PROTO_ZIP="protoc-21.4-linux-x86_64.zip"
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.4/$PROTO_ZIP
          unzip $PROTO_ZIP
          export PATH=$PATH:$HOME/d/protoc/bin
          protoc --version
          cd -
          cargo build --release --all --features flight-sql
      - persist_to_workspace:
          root: /root
          paths:
            - project/docker-tag.txt
            - project/helm
            - project/target/release/ballista-scheduler
            - project/target/release/ballista-executor
            - project/scheduler.Dockerfile
            - project/executor.Dockerfile

  deploy_docker:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /root
      - run: |
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          docker build -f scheduler.Dockerfile . -t spaceandtime.jfrog.io/sxt-docker-docker/ballista-scheduler:$DOCKER_TAG
          docker build -f executor.Dockerfile . -t spaceandtime.jfrog.io/sxt-docker-docker/ballista-executor:$DOCKER_TAG
          docker login -u$ARTIFACTORY_USER -p$ARTIFACTORY_API_KEY spaceandtime.jfrog.io
          docker push spaceandtime.jfrog.io/sxt-docker-docker/ballista-scheduler:$DOCKER_TAG
          docker push spaceandtime.jfrog.io/sxt-docker-docker/ballista-executor:$DOCKER_TAG

  generate_data:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /root
      - run: |
          echo "generating data..."
          mkdir data
          cd data
          docker run -it  -v "$(pwd)":/data ghcr.io/databloom-ai/tpch-docker:main -v -s 0.1
          echo -e "c_custkey|c_name|c_address|c_nationkey|c_phone|c_acctbal|c_mktsegment|c_comment|\n$(cat customer.tbl)" > customer.tbl
          echo -e "l_orderkey|l_partkey|l_suppkey|l_linenumber|l_quantity|l_extendedprice|l_discount|l_tax|l_returnflag|l_linestatus|l_shipdate|l_commitdate|l_receiptdate|l_shipinstruct|l_shipmode|l_comment|\n$(cat lineitem.tbl)" > lineitem.tbl
          echo -e "n_nationkey|n_name|n_regionkey|n_comment|\n$(cat nation.tbl)" > nation.tbl
          echo -e "o_orderkey|o_custkey|o_orderstatus|o_totalprice|o_orderdate|o_orderpriority|o_clerk|o_shippriority|o_comment|\n$(cat orders.tbl)" > orders.tbl
          echo -e "p_partkey|p_name|p_mfgr|p_brand|p_type|p_size|p_container|p_retailprice|p_comment|\n$(cat part.tbl)" > part.tbl
          echo -e "ps_partkey|ps_suppkey|ps_availqty|ps_supplycost|ps_comment|\n$(cat partsupp.tbl)" > partsupp.tbl
          echo -e "r_regionkey|r_name|r_comment|\n$(cat region.tbl)" > region.tbl
          echo -e "s_suppkey|s_name|s_address|s_nationkey|s_phone|s_acctbal|s_comment|\n$(cat supplier.tbl)" > supplier.tbl
      - persist_to_workspace:
          root: /root
          paths:
            - project/data

  deploy_helm:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /root
      - run: |
          set -x
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          cd /root/project/helm/ballista     
          az login --username=$AZ_USER --password=$AZ_PASS
          az aks get-credentials --resource-group DATA-WAREHOUSE-TEST --name DATA-WAREHOUSE-TEST-CLUSTER --admin
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export NAMESPACE="default"
          else
            export NAMESPACE=$(echo "$CIRCLE_BRANCH" | sed -r 's/[_]+/-/g')
          fi
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE
          kubectl create secret docker-registry regcred --docker-server=https://spaceandtime.jfrog.io/sxt-docker-docker --docker-username=$ARTIFACTORY_USER --docker-password=$ARTIFACTORY_API_KEY --docker-email=$ARTIFACTORY_EMAIL || true
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dep update --namespace $NAMESPACE 
          helm dep build --namespace $NAMESPACE 
          helm upgrade --install ballista . --namespace $NAMESPACE --debug --set image.scheduler=ballista-scheduler --set image.executor=ballista-executor --set image.tag=$DOCKER_TAG --set image.repository=spaceandtime.jfrog.io/sxt-docker-docker
          kubectl rollout status --watch --timeout=4m statefulSet ballista-scheduler
          kubectl rollout status --watch --timeout=4m statefulSet ballista-executor

  seed_data:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /root
      - run: |
          set -x
          apk add netcat-openbsd
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          az login --username=$AZ_USER --password=$AZ_PASS
          az aks get-credentials --resource-group DATA-WAREHOUSE-TEST --name DATA-WAREHOUSE-TEST-CLUSTER --admin
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /usr/local/bin/mc
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export NAMESPACE="default"
          else
            export NAMESPACE=$(echo "$CIRCLE_BRANCH" | sed -r 's/[_]+/-/g')
          fi
          kubectl port-forward --namespace $NAMESPACE service/ballista-minio 9000:9000 9001:9001 &
          while ! nc -vz 127.0.0.1 9000 > /dev/null 2>&1 ; do
            sleep 3
          done          
          mc alias set myminio http://127.0.0.1:9000 minio minio123
          cd /root/project/data
          mc mb --ignore-existing myminio/tpch
          mc cp *.tbl myminio/tpch
          mc ls myminio/tpch

workflows:
  main_workflow:
    jobs:
      - build
      - generate_data
      - deploy_docker:
          requires:
            - build
      - deploy_helm:
          requires:
            - deploy_docker
            - generate_data
      - seed_data:
          requires:
            - deploy_helm
