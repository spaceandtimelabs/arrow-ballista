# CircleCI configuration file
version: 2.1

jobs:
  tag:
    docker:
      - image: alpine/git
    steps:
      - checkout
      - run: |
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export DOCKER_TAG=$(git tag --points-at HEAD)
            if [ -z "$DOCKER_TAG" ]
            then
              export DOCKER_TAG=$(echo $(git describe --tags --abbrev=0) | awk -F. -v OFS=. '{$2 += 1 ; print}')
              git tag $DOCKER_TAG
              git push origin --tags
            fi
          else
            export SHORT_HASH=$(git rev-parse --short HEAD)
            export DOCKER_TAG="$CIRCLE_BRANCH-$SHORT_HASH"  
          fi
          echo $DOCKER_TAG > /root/project/docker-tag.txt
      - persist_to_workspace:
          root: /root
          paths:
            - project/docker-tag.txt

  build_rust:
    docker:
      - image: ubuntu:22.04
    steps:
      - checkout
      - run: |
          apt-get update
          apt-get -y install libssl-dev openssl zlib1g zlib1g-dev libpq-dev cmake protobuf-compiler netcat curl unzip git build-essential
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          export PATH=/root/.cargo/bin:$PATH
          cargo build --release --all --features flight-sql
      - persist_to_workspace:
          root: /root
          paths:
            - project/helm
            - project/target/release/ballista-scheduler
            - project/target/release/ballista-executor
            - project/dev/docker/

  build_react:
    docker:
      - image: ubuntu:22.04
    steps:
      - checkout
      - run: |
          apt-get update
          apt-get -y install nodejs npm
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          npm install -g yarn
          cd ballista/ui/scheduler
          yarn install
          CI=false yarn build # prevent warnings from being treated as errors because we have them
      - persist_to_workspace:
          root: /root
          paths:
            - project/ballista/ui/scheduler/build

  deploy_docker:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /root
      - run: |
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          docker build -f dev/docker/ballista-scheduler.Dockerfile . -t spaceandtime.jfrog.io/dw-docker-local/ballista-scheduler:$DOCKER_TAG
          docker build -f dev/docker/ballista-executor.Dockerfile . -t spaceandtime.jfrog.io/dw-docker-local/ballista-executor:$DOCKER_TAG
          docker login -u$ARTIFACTORY_USER -p$ARTIFACTORY_API_KEY spaceandtime.jfrog.io
          docker push spaceandtime.jfrog.io/dw-docker-local/ballista-scheduler:$DOCKER_TAG
          docker push spaceandtime.jfrog.io/dw-docker-local/ballista-executor:$DOCKER_TAG

  generate_data:
    docker:
      - image: ghcr.io/databloom-ai/tpch-docker:main
    steps:
      - run: |
          echo "generating data..."
          cd /opt/tpch/2.18.0_rc2/dbgen
          ./dbgen -v -s 0.1
          cd /data
          echo -e "c_custkey|c_name|c_address|c_nationkey|c_phone|c_acctbal|c_mktsegment|c_comment|junk\n$(cat customer.tbl)" > customer.csv
          echo -e "l_orderkey|l_partkey|l_suppkey|l_linenumber|l_quantity|l_extendedprice|l_discount|l_tax|l_returnflag|l_linestatus|l_shipdate|l_commitdate|l_receiptdate|l_shipinstruct|l_shipmode|l_comment|junk\n$(cat lineitem.tbl)" > lineitem.csv
          echo -e "n_nationkey|n_name|n_regionkey|n_comment|junk\n$(cat nation.tbl)" > nation.csv
          echo -e "o_orderkey|o_custkey|o_orderstatus|o_totalprice|o_orderdate|o_orderpriority|o_clerk|o_shippriority|o_comment|junk\n$(cat orders.tbl)" > orders.csv
          echo -e "p_partkey|p_name|p_mfgr|p_brand|p_type|p_size|p_container|p_retailprice|p_comment|junk\n$(cat part.tbl)" > part.csv
          echo -e "ps_partkey|ps_suppkey|ps_availqty|ps_supplycost|ps_comment|junk\n$(cat partsupp.tbl)" > partsupp.csv
          echo -e "r_regionkey|r_name|r_comment|junk\n$(cat region.tbl)" > region.csv
          echo -e "s_suppkey|s_name|s_address|s_nationkey|s_phone|s_acctbal|s_comment|junk\n$(cat supplier.tbl)" > supplier.csv
          mkdir -p /root/project/csv
          mv *.csv /root/project/csv
          cd /root/project/csv
          head customer.csv
      - persist_to_workspace:
          root: /root
          paths:
            - project/csv

  convert_data:
    docker:
      - image: hashicorp/spark-nomad
    steps:
      - attach_workspace:
          at: /root
      - run: |
          mkdir -p /root/project/parquet
          echo 'import java.io.File' >> run.scala
          echo 'val path = "/root/project"' >> run.scala
          echo 'val opts = Map("inferSchema"->"true","delimiter"->"|","header"->"true")' >> run.scala
          echo 'var dfs = new File(s"$path/csv").listFiles.map(f => (f.getName.split("\\.").head, spark.read.options(opts).csv(f.getCanonicalPath))).toMap' >> run.scala
          echo 'dfs.foreach{case (n, df) => df.write.parquet(s"$path/parquet/$n.parquet")}' >> run.scala
          echo 'System.exit(0)' >> run.scala
          spark-shell -i run.scala
          ls -l /root/project/parquet
      - persist_to_workspace:
          root: /root
          paths:
            - project/parquet

  deploy_helm:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /root
      - run: |
          set -x
          export DOCKER_TAG=$(cat /root/project/docker-tag.txt)
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          cd /root/project/helm/ballista     
          az login --username=$AZ_USER --password=$AZ_PASS
          az aks get-credentials --resource-group DATA-WAREHOUSE-TEST --name DATA-WAREHOUSE-TEST-CLUSTER --admin
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export NAMESPACE="default"
          else
            export NAMESPACE=$(echo "$CIRCLE_BRANCH" | sed -r 's/[_]+/-/g')
          fi
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE
          kubectl create secret docker-registry regcred \
            --docker-server=https://spaceandtime.jfrog.io/dw-docker-local \
            --docker-username=$ARTIFACTORY_USER \
            --docker-password=$ARTIFACTORY_API_KEY \
            --docker-email=$ARTIFACTORY_EMAIL || true
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dep update --namespace $NAMESPACE 
          helm dep build --namespace $NAMESPACE 
          helm uninstall ballista || true # some actions require a complete uninstall and reinstall
          helm install --wait ballista . --namespace $NAMESPACE --debug \
            --set image.scheduler=ballista-scheduler \
            --set image.executor=ballista-executor \
            --set image.tag=$DOCKER_TAG \
            --set image.repository=spaceandtime.jfrog.io/dw-docker-local \
            --set minio.auth.rootPassword="$MINIO_PASSWORD"

  seed_data:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /root
      - run: |
          set -x
          apk add netcat-openbsd
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          az login --username=$AZ_USER --password=$AZ_PASS
          az aks get-credentials --resource-group DATA-WAREHOUSE-TEST --name DATA-WAREHOUSE-TEST-CLUSTER --admin
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /usr/local/bin/mc
          if [ $CIRCLE_BRANCH = "master" ]
          then
            export NAMESPACE="default"
          else
            export NAMESPACE=$(echo "$CIRCLE_BRANCH" | sed -r 's/[_]+/-/g')
          fi
          kubectl port-forward --namespace $NAMESPACE service/ballista-minio 9000:9000 9001:9001 &
          while ! nc -vz 127.0.0.1 9000 > /dev/null 2>&1 ; do
            sleep 3
          done          
          mc alias set myminio http://127.0.0.1:9000 minio "$MINIO_PASSWORD"
          mc mb --ignore-existing myminio/tpch
          mc cp --quiet --no-color --debug --recursive /root/project/parquet/* /root/project/csv/* myminio/tpch
          mc ls myminio/tpch

workflows:
  main_workflow:
    jobs:
      - tag
      - build_rust:
          requires:
            - tag
      - build_react:
          requires:
            - tag
      - generate_data
      - convert_data:
          requires:
            - generate_data
      - deploy_docker:
          requires:
            - build_rust
            - build_react
      - deploy_helm:
          requires:
            - deploy_docker
      - seed_data:
          requires:
            - convert_data
            - deploy_helm
